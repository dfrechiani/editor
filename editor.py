import streamlit as st
import openai
import asyncio
from typing import Dict

# Configura√ß√£o do OpenAI usando o secret do Streamlit
openai.api_key = st.secrets["OPENAI_API_KEY"]

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Assistente de Reda√ß√£o ENEM",
    page_icon="üìù",
    layout="wide"
)

class RedacaoAnalyzer:
    def __init__(self):
        self.system_prompt = """Voc√™ √© um assistente especializado em reda√ß√£o do ENEM.
        Analise o texto considerando as 5 compet√™ncias:
        
        1. Dom√≠nio da norma culta
        2. Compreens√£o do tema e estrutura dissertativa
        3. Argumenta√ß√£o
        4. Coes√£o textual
        5. Proposta de interven√ß√£o
        
        Para cada par√°grafo, forne√ßa:
        - Pontos positivos
        - Sugest√µes de melhoria
        - Dicas espec√≠ficas para aprimoramento
        
        Use uma linguagem amig√°vel e construtiva."""

    async def analyze_text(self, text: str) -> Dict:
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"Analise o seguinte texto para a reda√ß√£o do ENEM: {text}"}
        ]

        try:
            response = await openai.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                temperature=0.7
            )
            return {"status": "success", "feedback": response.choices[0].message.content}
        except Exception as e:
            return {"status": "error", "message": str(e)}

    async def get_competency_scores(self, text: str) -> Dict:
        messages = [
            {"role": "system", "content": self.system_prompt},
            {"role": "user", "content": f"""Avalie as 5 compet√™ncias do ENEM para o seguinte texto, 
            dando uma nota de 0 a 200 para cada e uma breve justificativa: {text}"""}
        ]

        try:
            response = await openai.ChatCompletion.create(
                model="gpt-4",
                messages=messages,
                temperature=0.3
            )
            return {"status": "success", "scores": response.choices[0].message.content}
        except Exception as e:
            return {"status": "error", "message": str(e)}

# Inicializa√ß√£o do estado da sess√£o
if 'redacao_text' not in st.session_state:
    st.session_state.redacao_text = ""
if 'feedback' not in st.session_state:
    st.session_state.feedback = ""
if 'analyzer' not in st.session_state:
    st.session_state.analyzer = RedacaoAnalyzer()
if 'tema' not in st.session_state:
    st.session_state.tema = ""

# Fun√ß√£o para atualizar o feedback
async def update_feedback():
    if st.session_state.redacao_text:
        feedback = await st.session_state.analyzer.analyze_text(st.session_state.redacao_text)
        if feedback["status"] == "success":
            st.session_state.feedback = feedback["feedback"]
        else:
            st.session_state.feedback = "Erro na an√°lise. Tente novamente."

# Interface principal
st.title("üìù Assistente de Reda√ß√£o ENEM")

# √Årea do tema
st.session_state.tema = st.text_input("Digite o tema da reda√ß√£o:", st.session_state.tema)

# Layout em duas colunas
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("Sua Reda√ß√£o")
    redacao_text = st.text_area(
        "Digite sua reda√ß√£o aqui",
        height=400,
        key="redacao_input",
        on_change=lambda: asyncio.run(update_feedback())
    )

with col2:
    st.subheader("Feedback do Assistente")
    if st.session_state.feedback:
        st.markdown(st.session_state.feedback)

    if st.button("Analisar Compet√™ncias"):
        with st.spinner("Analisando compet√™ncias..."):
            scores = asyncio.run(
                st.session_state.analyzer.get_competency_scores(st.session_state.redacao_text)
            )
            if scores["status"] == "success":
                st.markdown("### Notas por Compet√™ncia")
                st.markdown(scores["scores"])

# √Årea de estat√≠sticas
st.sidebar.title("Estat√≠sticas")
if st.session_state.redacao_text:
    word_count = len(st.session_state.redacao_text.split())
    char_count = len(st.session_state.redacao_text)
    paragraph_count = len(st.session_state.redacao_text.split('\n\n')) + 1
    
    st.sidebar.metric("Palavras", word_count)
    st.sidebar.metric("Caracteres", char_count)
    st.sidebar.metric("Par√°grafos", paragraph_count)
    
    # Avalia√ß√£o r√°pida do tamanho
    if word_count < 250:
        st.sidebar.warning("‚ö†Ô∏è Texto muito curto. Procure desenvolver mais.")
    elif word_count > 350:
        st.sidebar.warning("‚ö†Ô∏è Texto muito longo. Considere sintetizar.")
    else:
        st.sidebar.success("‚úÖ Tamanho adequado!")

# Dicas e recomenda√ß√µes
st.sidebar.markdown("""
### Dicas para Nota 1000
1. **Introdu√ß√£o**:
   - Contextualize o tema
   - Apresente sua tese
   
2. **Desenvolvimento**:
   - Use repert√≥rio sociocultural
   - Conecte os par√°grafos
   
3. **Conclus√£o**:
   - Proposta de interven√ß√£o completa
   - Retome aspectos principais
""")

# √Årea de ajuda
with st.expander("Como usar o assistente"):
    st.markdown("""
    ### Instru√ß√µes de Uso
    
    1. **Digite o tema** no campo superior
    2. **Escreva sua reda√ß√£o** no editor principal
    3. Receba **feedback em tempo real**
    4. Use o bot√£o **Analisar Compet√™ncias** para avalia√ß√£o detalhada
    5. Acompanhe as **estat√≠sticas** na barra lateral
    
    ### Estrutura Recomendada
    
    - **Introdu√ß√£o**: 1 par√°grafo
    - **Desenvolvimento**: 2-3 par√°grafos
    - **Conclus√£o**: 1 par√°grafo
    
    ### Crit√©rios de Avalia√ß√£o
    
    1. Dom√≠nio da norma culta (200 pontos)
    2. Compreens√£o do tema (200 pontos)
    3. Argumenta√ß√£o (200 pontos)
    4. Coes√£o textual (200 pontos)
    5. Proposta de interven√ß√£o (200 pontos)
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <p>Desenvolvido para auxiliar estudantes na prepara√ß√£o para o ENEM</p>
</div>
""", unsafe_allow_html=True)
