import json
import logging
from typing import Any, Dict, List

# Verifique se o Streamlit est√° instalado antes de importar
try:
    import streamlit as st
    # Configura√ß√£o inicial do Streamlit
    st.set_page_config(page_title="Trilha de Compet√™ncias - ENEM", page_icon="üìù", layout="wide")
except ModuleNotFoundError as e:
    raise RuntimeError("O m√≥dulo Streamlit n√£o est√° instalado no ambiente. Certifique-se de que Streamlit esteja dispon√≠vel antes de executar o c√≥digo.")

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("Trilha de Compet√™ncias")

# Inicializa√ß√£o do estado da sess√£o
if 'trilha' not in st.session_state:
    st.session_state.trilha = {}

COMPETENCIAS = {
    "competencia1": "Dom√≠nio da Norma Culta",
    "competencia2": "Compreens√£o do Tema",
    "competencia3": "Sele√ß√£o e Organiza√ß√£o das Informa√ß√µes",
    "competencia4": "Conhecimento dos Mecanismos Lingu√≠sticos",
    "competencia5": "Proposta de Interven√ß√£o"
}

def apresentar_competencia(competencia: str):
    """Apresenta a compet√™ncia selecionada."""
    st.subheader(f"Compet√™ncia: {COMPETENCIAS[competencia]}")
    st.write(f"Nesta etapa, analisaremos a {COMPETENCIAS[competencia]}.")

def identificar_agrupamento_erros(competencia: str, erros_extraidos: List[str]):
    """Identifica e agrupa os erros extra√≠dos pela an√°lise."""
    st.subheader("Identifica√ß√£o e Agrupamento de Erros")
    if erros_extraidos:
        st.write("### Erros Detectados:")
        for erro in erros_extraidos:
            st.markdown(f"- {erro}")
    else:
        st.write("Nenhum erro detectado.")

def teoria_exercicios_personalizados(erros_detectados: List[str]):
    """Apresenta teoria e exerc√≠cios personalizados para os erros detectados."""
    st.subheader("Teoria e Exerc√≠cios Personalizados")
    for erro in erros_detectados:
        st.write(f"**Erro:** {erro}")
        st.write(f"Teoria sobre {erro}:")
        st.write("Aqui voc√™ encontrar√° explica√ß√µes detalhadas e exemplos sobre como corrigir esse tipo de erro.")
        st.write(f"Exerc√≠cio: Corrija a frase abaixo que cont√©m um erro de {erro}.")

def finalizar_competencia(competencia: str, progresso: Dict[str, any]):
    """Finaliza a an√°lise de uma compet√™ncia e salva o progresso."""
    st.session_state.trilha[competencia] = progresso
    st.success(f"A compet√™ncia {COMPETENCIAS[competencia]} foi conclu√≠da com sucesso!")

def processar_redacao(competencia: str, texto_redacao: str) -> List[str]:
    """Chama a fun√ß√£o de an√°lise correspondente para processar a reda√ß√£o."""
    try:
        from analysis_function import processar_redacao_completa
        resultados = processar_redacao_completa(texto_redacao, competencia)
        return resultados.get('erros', [])
    except ImportError as e:
        st.error("Erro ao importar a fun√ß√£o de an√°lise. Verifique se o arquivo 'analysis_function.py' est√° correto.")
        logger.error(f"Erro ao importar fun√ß√£o de an√°lise: {e}")
        return []
    except Exception as e:
        st.error("Erro ao processar a reda√ß√£o. Tente novamente.")
        logger.error(f"Erro ao processar reda√ß√£o: {e}")
        return []

def trilha_de_competencias():
    """Interface principal para trilha de compet√™ncias."""
    st.title("Trilha de Compet√™ncias ENEM")

    texto_redacao = st.text_area("Digite a reda√ß√£o para an√°lise:", height=300)

    if not texto_redacao.strip():
        st.warning("Por favor, insira o texto da reda√ß√£o para come√ßar.")
        return

    competencia_selecionada = st.selectbox("Escolha a compet√™ncia para an√°lise:", options=list(COMPETENCIAS.keys()), format_func=lambda x: COMPETENCIAS[x])

    if st.button("Iniciar An√°lise"):
        apresentar_competencia(competencia_selecionada)
        erros_detectados = processar_redacao(competencia_selecionada, texto_redacao)
        identificar_agrupamento_erros(competencia_selecionada, erros_detectados)
        teoria_exercicios_personalizados(erros_detectados)
        progresso = {"erros": erros_detectados, "texto": texto_redacao}
        finalizar_competencia(competencia_selecionada, progresso)

if __name__ == "__main__":
    trilha_de_competencias()
